from django.core.management import call_command
from django.test import TestCase
from django.utils.datastructures import MultiValueDict

from ..finder_services import Filters


class FinderServicesTests(TestCase):
    fixtures = ['data.json', ]

    def test_creates_choices_for_widgets(self):
        """
        Checks the correctness of the created "choices"
        for widgets (CheckBoxForm) based on unique values from HousePlants.
        """
        call_command('loaddata', 'finder/fixtures/data.json')

        expected_output = {
            "level_of_care": (
                (
                    "Средне// В целом неприхотливо, может предъявлять особые для данного вида требования",
                    "Средне// В целом неприхотливо, может предъявлять особые для данного вида требования"
                ),
                (
                    "Мало// Не нуждается в особых требованиях для роста и цветения",
                    "Мало// Не нуждается в особых требованиях для роста и цветения"
                ),
                (
                    "Много// Требовательно в уходе (холодная зимовка, досветка, укрытие (в саду) и т.д.)",
                    "Много// Требовательно в уходе (холодная зимовка, досветка, укрытие (в саду) и т.д.)"
                )
            ),
            "light_level": (
                (
                    "Средне// Допустимы прямые лучи несколько часов, восточная, западная ориентация",
                    "Средне// Допустимы прямые лучи несколько часов, восточная, западная ориентация"
                ),
                (
                    "Мало// Теневыносливо",
                    "Мало// Теневыносливо"
                ),
                (
                    "Много// Западная, южная ориентация, может потребовать несколько часов прямых солнечных лучей",
                    "Много// Западная, южная ориентация, может потребовать несколько часов прямых солнечных лучей"
                )
            ),
            "irrigation_level": (
                (
                    "Мало// Засухоустойчиво",
                    "Мало// Засухоустойчиво"
                ),
                (
                    "Много// Нуждается в постоянно увлажненной почве (полив более 3-х раз в неделю)",
                    "Много// Нуждается в постоянно увлажненной почве (полив более 3-х раз в неделю)"
                ),
                (
                    "Средне// Обильный полив 2-3 раза в неделю",
                    "Средне// Обильный полив 2-3 раза в неделю"
                )
            ),
            "temperature": (
                (
                    "теплое содержание (+22 — +27°C)",
                    "теплое содержание (+22 — +27°C)"
                ),
                (
                    "умеренно-теплое содержание (+18 — +25°C)",
                    "умеренно-теплое содержание (+18 — +25°C)"
                ),
                (
                    "холодное содержание (+5 — +18°C)",
                    "холодное содержание (+5 — +18°C)"
                )
            ),
            "humidity": (
                (
                    "Мало// Нетребовательно к влажности водуха",
                    "Мало// Нетребовательно к влажности водуха"
                ),
                (
                    "Много// Высокая влажность (60% и более: тропики круглый год; типичная влажность летом в средней полосе)",
                    "Много// Высокая влажность (60% и более: тропики круглый год; типичная влажность летом в средней полосе)"
                ),
                (
                    "Средне// Умеренная влажность (не менее 35%, обычная уличная влажность воздуха в тени)",
                    "Средне// Умеренная влажность (не менее 35%, обычная уличная влажность воздуха в тени)"
                )
                ),
            "feeding": (
                (
                    "Средне// Удобрение только в период активного роста (минимум в период отдыха)",
                    "Средне// Удобрение только в период активного роста (минимум в период отдыха)"
                ),
                (
                    "Много// Потребует частого удобрения (в том числе круглый год)",
                    "Много// Потребует частого удобрения (в том числе круглый год)"
                ),
                (
                    "Мало// Достаточно питат. веществ из собственной почвы или редкого удобрения",
                    "Мало// Достаточно питат. веществ из собственной почвы или редкого удобрения"
                )
                )
        }

        resp = Filters.creates_choices_for_widgets()
        self.assertEqual(resp, expected_output)

    def test_converts_dictionary(self):
        """
        Checks that the dictionary values from the tuple have changed to the list, and removes duplication.
        """
        expected_input = {
            'level_of_care': (
                ('Много// Требовательно в уходе (холодная зимовка, досветка, укрытие (в саду) и т.д.)',
                 'Много// Требовательно в уходе (холодная зимовка, досветка, укрытие (в саду) и т.д.)'),
                ('Мало// Не нуждается в особых требованиях для роста и цветения',
                 'Мало// Не нуждается в особых требованиях для роста и цветения'),
                ('Средне// В целом неприхотливо, может предъявлять особые для данного вида требования',
                 'Средне// В целом неприхотливо, может предъявлять особые для данного вида требования')
            ),
            'light_level': (
                ('Средне// Допустимы прямые лучи несколько часов, восточная, западная ориентация',
                 'Средне// Допустимы прямые лучи несколько часов, восточная, западная ориентация'
                 ),
                ('Много// Западная, южная ориентация, может потребовать несколько часов прямых солнечных лучей',
                 'Много// Западная, южная ориентация, может потребовать несколько часов прямых солнечных лучей'),
                ('Мало// Теневыносливо',
                 'Мало// Теневыносливо')
            )
        }

        expected_output = {
            'level_of_care': [
                'Много// Требовательно в уходе (холодная зимовка, досветка, укрытие (в саду) и т.д.)',
                'Мало// Не нуждается в особых требованиях для роста и цветения',
                'Средне// В целом неприхотливо, может предъявлять особые для данного вида требования'
            ],
            'light_level': [
                'Средне// Допустимы прямые лучи несколько часов, восточная, западная ориентация',
                'Много// Западная, южная ориентация, может потребовать несколько часов прямых солнечных лучей',
                'Мало// Теневыносливо'
            ]
        }

        resp = Filters.converts_dictionary(expected_input)
        self.assertEqual(resp, expected_output)

    def test_creates_default_filters_for_start_page(self):
        """
        Checks the correctness of the created default filters.
        """
        expected_input = {
            'level_of_care': [
                'Много// Требовательно в уходе (холодная зимовка, досветка, укрытие (в саду) и т.д.)',
                'Мало// Не нуждается в особых требованиях для роста и цветения',
                'Средне// В целом неприхотливо, может предъявлять особые для данного вида требования'
            ],
            'light_level': [
                'Средне// Допустимы прямые лучи несколько часов, восточная, западная ориентация',
                'Много// Западная, южная ориентация, может потребовать несколько часов прямых солнечных лучей',
                'Мало// Теневыносливо'
            ]
        }
        expected_output = {
            'level_of_care__in': [
                'Много// Требовательно в уходе (холодная зимовка, досветка, укрытие (в саду) и т.д.)',
                'Мало// Не нуждается в особых требованиях для роста и цветения',
                'Средне// В целом неприхотливо, может предъявлять особые для данного вида требования'
            ],
            'light_level__in': [
                'Средне// Допустимы прямые лучи несколько часов, восточная, западная ориентация',
                'Много// Западная, южная ориентация, может потребовать несколько часов прямых солнечных лучей',
                'Мало// Теневыносливо'
            ]
        }
        resp = Filters.creates_default_filters_for_start_page(expected_input)
        self.assertEqual(resp, expected_output)

    def test_changing_value_of_filters(self):
        request_data = MultiValueDict(
            {"csrfmiddlewaretoken": [
                "Hj4CGbCcY7xoiEjj8DeO5jakHN3LRy4e3ChkvnuwJA6WrwhjMYsPlmuyc0yZAK8j"
            ],
                "light_level": [
                    "Средне// Допустимы прямые лучи несколько часов, восточная, западная ориентация"
                ],
                "submit": [
                    "Применить"
                ]
            })

        expected_input = {
            "level_of_care": [
                "Много// Требовательно в уходе (холодная зимовка, досветка, укрытие (в саду) и т.д.)",
                "Мало// Не нуждается в особых требованиях для роста и цветения",
                "Средне// В целом неприхотливо, может предъявлять особые для данного вида требования"
            ],
            "light_level": [
                "Средне// Допустимы прямые лучи несколько часов, восточная, западная ориентация",
                "Много// Западная, южная ориентация, может потребовать несколько часов прямых солнечных лучей",
                "Мало// Теневыносливо"
            ]
        }
        expected_output = {
            "level_of_care__in": [
                "Много// Требовательно в уходе (холодная зимовка, досветка, укрытие (в саду) и т.д.)",
                "Мало// Не нуждается в особых требованиях для роста и цветения",
                "Средне// В целом неприхотливо, может предъявлять особые для данного вида требования"
            ],
            "light_level__in": [
                "Средне// Допустимы прямые лучи несколько часов, восточная, западная ориентация"
            ]
        }

        resp = Filters.changing_value_of_filters(request_data, expected_input)
        self.assertEqual(resp, expected_output)

